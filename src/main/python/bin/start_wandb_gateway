#!/usr/bin/env python
# PYTHON_ARGCOMPLETE_OK

from wandb_gateway.wandb_interface import *
import sys
import argparse
import logging

parser = argparse.ArgumentParser(description="Start Java Gateway to expose WandB via JVM.")
# parser.add_argument('integers', metavar='N', type=int, nargs='+',
#                     help='an integer for the accumulator')
parser.add_argument("--java-address", default = "127.0.0.1")
parser.add_argument("--java-port", default = 25333)
parser.add_argument("--python-address", default = "127.0.0.1")
parser.add_argument("--python-port", default = 25334)
parser.add_argument("--logging-level", default = "INFO")

logging.basicConfig(
    filename = "{}.log".format(__name__), 
    filemode = "w",
    format="{} - %(levelname)s - %(asctime)s - %(message)s".format("TMI")
)

logger = logging.getLogger("WandB Gateway")
logger.addHandler(logging.StreamHandler())


if __name__ == "__main__":

    args = parser.parse_args()
    logger.setLevel(args.logging_level)
    logger.info(args)
 
    java_params = JavaParameters(address = args.java_address, port = int(args.java_port))
    python_params = PythonParameters(address = args.python_address, port = int(args.python_port))
    wandb_gateway = PyIWandB()
    gateway = ClientServer(
        java_parameters=java_params,
        python_parameters=python_params,
        python_server_entry_point=wandb_gateway,
    )
    logger.info("wandb_gateway started")


# Make sure that the python code is started first.
# Then execute: java -cp py4j.jar
# py4j.examples.SingleThreadClientApplication

# from py4j.java_gateway import JavaGateway, CallbackServerParameters
# simple_hello = SimpleHello()

# gateway = JavaGateway(
#     callback_server_parameters=CallbackServerParameters(),
#     python_server_entry_point=simple_hello
#     # python_server_entry_point=simple_hello
# )
